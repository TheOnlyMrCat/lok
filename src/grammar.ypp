%code top {
#include "clok.hpp"
#include "bridge.hpp"

extern int yylex();
void yyerror(const char *p);
}

%require "3.5"
%language "c++"
%skeleton "lalr1.cc"

%define api.value.type variant
%define api.token.constructor

%locations

%code requires {
class Bridge;

#include "types.hpp"
}

%param { Bridge *bridge }

%code provides {

/* Currently, these are in no particular order.
 * When released, the order will be normalised.
 */

enum class NodeType {
#include "nodetypenames.txt"
};

struct ValueType {
    union {
        long long valI;
        double valF;
    };
    strings_t valC;
    bool valB;
};

struct Node {
  Node(int initialChildren, NodeType type, yy::parser::location_type loc) : type(type), location(loc) {
    children.reserve(initialChildren);
  }

  NodeType type;
  struct ValueType value;
  yy::parser::location_type location;

  std::vector<std::unique_ptr<Node>> children;
};
}

%define parse.error verbose
%define parse.lac full

%code {
#include "bridge.hpp"
}

%token <strings_t> ID STRING
%token <double> FLOAT
%token <long long> INTEGER CHAR
%token <bool> BIT

%token DBLCOLON "::" DBLBAR "||" DBLAND "&&" DBLXOR "^^" DBLLEFT "<<" DBLRIGHT ">>" TPLRIGHT ">>>" DBLPLUS "++" DBLMINUS "--" DBLNOT "!!"
%token COLONARROW ":>"
%token DBLEQ "==" NOTEQ "!=" GTEQ ">=" LTEQ "<="
%token RSARROW "->" RDARROW "=>" RRDARROW ">=>"
%token COMPADD "+=" COMPSUB "-=" COMPMUL "*=" COMPDIV "/=" COMPMOD "%=" COMPAND "&=" COMPIOR "|=" COMPXOR "^=" COMPASL "<<=" COMPASR ">>=" COMPUSR ">>>="
%token END 0

%token RUNK "run" LOADK "load" IFK "if" ELSEK "else" FORK "for" WHILEK "while" NEWK "new" STRUCTK "struct" CLASSK "class" NAMESPACEK "namespace"
%token DELETEK "delete" OPERATORK "operator" RETURNK "return"

%type <strings_t> CompAssignOperator
%type <NodePtr> LoadStatement NamespaceStatement NamespaceItems FileLocator FilePath FullyQualifiedPath QualifiedPath NamespaceItem RunDeclaration ClassItem ClassBody
%type <NodePtr> BasicDeclaration TypeDeclaration FuncDefinition FunctionBody ParameterList Parameters Parameter Arguments ArgumentList
%type <NodePtr> Attributes AttributeList
%type <NodePtr> ClassDefinition CtorDefinition CtorInit CtorAssign DtorDefinition OpOverload
%type <NodePtr> Type SingleType TupleTypes TupleType FunctionType TypeQualifiers
%type <NodePtr> BlockStatement Statements Statement
%type <NodePtr> IfStatement ForStatement ForArguments DoForStatement DoForArguments WhileStatement ReturnStatement
%type <NodePtr> Expression BasicExpression
%type <NodePtr> BasicValue BasicValueString

%right "if" "else"
%left "QualifiedIDPart"

%right '=' "CompAssign" "+=" "-=" "*=" "/=" "%=" "&=" "|=" "^=" "<<=" ">>=" ">>>="
%left "||"
%left "^^"
%left "&&"
%left '|'
%left '^'
%left '&'
%left "==" "!="
%left '<' "<=" '>' ">="
%left "<=>"
%left "<<" ">>" ">>>"
%left '+' '-'
%left '*' '/' '%'
%left "++" "--" '(' '['
%right "PrefixOperator"
%left '.'

%code {
  inline void addChild(NodePtr& parent, NodePtr&& child) {
    parent->children.push_back(std::move(child));
  }

  inline void addChild(NodePtr& parent, NodePtr& child) {
    parent->children.push_back(std::move(child));
  }
}

%%
root:
    %empty
  | root LoadStatement 	     { addChild(bridge->result, $2); }
  | root NamespaceStatement  { addChild(bridge->result, $2); }
  | root NamespaceItem 	     { addChild(bridge->result, $2); }
  | root "namespace" '(' ')' { }
  ;

LoadStatement:
    "load" '(' FileLocator ')' { $$ = std::make_unique<Node>(1, NodeType::LOAD, @$); addChild($$, $3); }
  ;

NamespaceStatement:
    "namespace" '(' FullyQualifiedPath ')' NamespaceItems { $$ = std::make_unique<Node>(1, NodeType::NAMESPACE, @$); addChild($$, $3); addChild($$, $5); }

FileLocator:
    FilePath         { $$ = std::make_unique<Node>(1, NodeType::NONE, @$); addChild($$, $1); }
  | ID ":>" FilePath { $$ = std::make_unique<Node>(2, NodeType::NONE, @$); NodePtr libN = std::make_unique<Node>(0, NodeType::LIBNAME, @$); libN->value.valC = $1; addChild($$, libN); addChild($$, $3); }
  ;

FilePath:
    ID              { $$ = std::make_unique<Node>(0, NodeType::FILEPATH, @$); $$->value.valC = $1; }
  | ID '/' FilePath { $$ = std::make_unique<Node>(1, NodeType::FILEPATH, @$); addChild($$, $3); $$->value.valC = $1; }
  ;

FullyQualifiedPath:
    QualifiedPath         { $$ = std::make_unique<Node>(1, NodeType::FQUALPATH, @$); addChild($$, $1); }
  | ID ":>" QualifiedPath { $$ = std::make_unique<Node>(2, NodeType::FQUALPATH, @$); NodePtr libN = std::make_unique<Node>(0, NodeType::LIBNAME, @$); libN->value.valC = $1; addChild($$, libN); addChild($$, $3); }
  ;

QualifiedPath:
    ID                   { $$ = std::make_unique<Node>(0, NodeType::QUALPATH, @$); $$->value.valC = $1; }
  | ID "::" QualifiedPath { $$ = std::make_unique<Node>(1, NodeType::QUALPATH, @$); addChild($$, $3); $$->value.valC = $1; }

NamespaceItems:
    %empty                       { $$ = std::make_unique<Node>(0, NodeType::NONE, @$); }
  | NamespaceItems NamespaceItem %prec "NamespaceItems" { $$ = std::move($1); addChild($$, $2); }
  ;

NamespaceItem:
    BasicDeclaration ';' { $$ = std::move($1); }
  | RunDeclaration       { $$ = std::move($1); }
  | TypeDeclaration      { $$ = std::move($1); }
  ;

BasicDeclaration:
    Attributes ID ':' Type '=' Expression { $$ = std::make_unique<Node>(3, NodeType::DECL, @$); $$->value.valC = $2; addChild($$, $4); addChild($$, $6); addChild($$, $1); }
  | Attributes ID ':' '=' Expression      { $$ = std::make_unique<Node>(3, NodeType::DECL, @$); $$->value.valC = $2; addChild($$, $5); addChild($$, $1); }
  | Attributes ID ':' Type                { $$ = std::make_unique<Node>(2, NodeType::DECL, @$); $$->value.valC = $2; addChild($$, $4); addChild($$, $1); }
  | ID ':' Type '=' Expression            { $$ = std::make_unique<Node>(2, NodeType::DECL, @$); $$->value.valC = $1; addChild($$, $3); addChild($$, $5); }
  | ID ':' '=' Expression                 { $$ = std::make_unique<Node>(2, NodeType::DECL, @$); $$->value.valC = $1; addChild($$, $4); }
  | ID ':' Type                           { $$ = std::make_unique<Node>(1, NodeType::DECL, @$); $$->value.valC = $1; addChild($$, $3); }
  ;

TypeDeclaration:
    Attributes ID "::" ClassDefinition ';' { $$ = std::make_unique<Node>(2, NodeType::TYPEDECL, @$); $$->value.valC = $2; addChild($$, $4); addChild($$, $1); }
  | ID "::" ClassDefinition ';'            { $$ = std::make_unique<Node>(1, NodeType::TYPEDECL, @$); $$->value.valC = $1; addChild($$, $3); }
  ;

RunDeclaration:
    "run" FuncDefinition ';'                 { $$ = std::make_unique<Node>(1, NodeType::RUN, @$); addChild($$, $2); $$->value.valI = -1; }
  | "run" '[' INTEGER ']' FuncDefinition ';' { $$ = std::make_unique<Node>(1, NodeType::RUN, @$); addChild($$, $5); $$->value.valI = $3; }
  ;

FuncDefinition:
    Parameters "->" Type "=>" Expression ';' { $$ = std::make_unique<Node>(3, NodeType::FUNCDEF, @$); addChild($$, $5); addChild($$, $1); addChild($$, $3); }
  | Parameters "=>" Expression ';'           { $$ = std::make_unique<Node>(2, NodeType::FUNCDEF, @$); addChild($$, $3); addChild($$, $1); }
  | Parameters "->" Type ">=>" FunctionBody  { $$ = std::make_unique<Node>(3, NodeType::FUNCDEF, @$); addChild($$, $5); addChild($$, $1); addChild($$, $3); }
  | Parameters ">=>" FunctionBody            { $$ = std::make_unique<Node>(2, NodeType::FUNCDEF, @$); addChild($$, $3); addChild($$, $1); }
  ;

FunctionBody:
    BlockStatement { $$ = std::move($1); }
  ;

ClassDefinition:
    "struct" "=>" TupleType ">=>" '{' ClassBody '}' { $$ = std::make_unique<Node>(2, NodeType::STRUCTDEF, @$); addChild($$, $6); addChild($$, $3); }
  | "struct" ">=>" '{' ClassBody '}'                { $$ = std::make_unique<Node>(1, NodeType::STRUCTDEF, @$); addChild($$, $4); }
  | "class" "=>" TupleType ">=>" '{' ClassBody '}'  { $$ = std::make_unique<Node>(2, NodeType::CLASSDEF, @$); addChild($$, $6); addChild($$, $3); }
  | "class" ">=>" '{' ClassBody '}'                 { $$ = std::make_unique<Node>(1, NodeType::CLASSDEF, @$); addChild($$, $4); }
  ;

ClassBody:
    %empty              { $$ = std::make_unique<Node>(0, NodeType::NONE, @$); }
  | ClassBody ClassItem { $$ = std::move($1); addChild($$, $2); }
  ;

ClassItem:
    BasicDeclaration ';' { $$ = std::move($1); }
  | CtorDefinition       { $$ = std::move($1); }
  | DtorDefinition       { $$ = std::move($1); }
  | OpOverload           { $$ = std::move($1); }
  ;

CtorDefinition:
    Attributes "new" Parameters "=>" CtorInit ">=>" FunctionBody ';' { $$ = std::make_unique<Node>(4, NodeType::CTORDEF, @$); addChild($$, $3); addChild($$, $5); addChild($$, $7); addChild($$, $1); }
  | Attributes "new" Parameters ">=>" FunctionBody ';'               { $$ = std::make_unique<Node>(3, NodeType::CTORDEF, @$); addChild($$, $3); addChild($$, $5); addChild($$, $1); }
  | Attributes "new" Parameters "=>" CtorInit ';'                    { $$ = std::make_unique<Node>(3, NodeType::CTORDEF, @$); addChild($$, $3); addChild($$, $5); addChild($$, $1); }
  | "new" Parameters "=>" CtorInit ">=>" FunctionBody ';'            { $$ = std::make_unique<Node>(3, NodeType::CTORDEF, @$); addChild($$, $2); addChild($$, $4); addChild($$, $6); }
  | "new" Parameters ">=>" FunctionBody ';'                          { $$ = std::make_unique<Node>(2, NodeType::CTORDEF, @$); addChild($$, $2); addChild($$, $4); }
  | "new" Parameters "=>" CtorInit ';'                               { $$ = std::make_unique<Node>(2, NodeType::CTORDEF, @$); addChild($$, $2); addChild($$, $4); }
  ;

CtorInit:
    CtorAssign              { $$ = std::make_unique<Node>(1, NodeType::CTORINIT, @$); addChild($$, $1); }
  | CtorInit ',' CtorAssign { $$ = std::move($1); addChild($$, $3); }
  ;

CtorAssign:
    ID '=' BasicExpression { $$ = std::make_unique<Node>(1, NodeType::NONE, @$); $$->value.valC = $1; addChild($$, $3); }
  ;

DtorDefinition:
    Attributes "delete" ">=>" FunctionBody { $$ = std::make_unique<Node>(2, NodeType::DTORDEF, @$); addChild($$, $4); addChild($$, $1); }
  | "delete" ">=>" FunctionBody            { $$ = std::make_unique<Node>(1, NodeType::DTORDEF, @$); addChild($$, $3); }
  ;

OpOverload:
    Attributes "operator" '+' FuncDefinition ';'   { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $4); $$->value.valC = getString("+"); addChild($$, $1); }
  | Attributes "operator" '-' FuncDefinition ';'   { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $4); $$->value.valC = getString("-"); addChild($$, $1); }
  | Attributes "operator" '*' FuncDefinition ';'   { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $4); $$->value.valC = getString("*"); addChild($$, $1); }
  | Attributes "operator" '/' FuncDefinition ';'   { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $4); $$->value.valC = getString("/"); addChild($$, $1); }
  | Attributes "operator" '%' FuncDefinition ';'   { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $4); $$->value.valC = getString("%"); addChild($$, $1); }
  | Attributes "operator" '&' FuncDefinition ';'   { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $4); $$->value.valC = getString("&"); addChild($$, $1); }
  | Attributes "operator" '|' FuncDefinition ';'   { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $4); $$->value.valC = getString("|"); addChild($$, $1); }
  | Attributes "operator" '^' FuncDefinition ';'   { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $4); $$->value.valC = getString("^"); addChild($$, $1); }
  | Attributes "operator" ">>" FuncDefinition ';'  { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $4); $$->value.valC = getString(">>"); addChild($$, $1); }
  | Attributes "operator" "<<" FuncDefinition ';'  { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $4); $$->value.valC = getString("<<"); addChild($$, $1); }
  | Attributes "operator" ">>>" FuncDefinition ';' { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $4); $$->value.valC = getString(">>>"); addChild($$, $1); }
  | Attributes "operator" "&&" FuncDefinition ';'  { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $4); $$->value.valC = getString("&&"); addChild($$, $1); }
  | Attributes "operator" "||" FuncDefinition ';'  { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $4); $$->value.valC = getString("||"); addChild($$, $1); }
  | Attributes "operator" "^^" FuncDefinition ';'  { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $4); $$->value.valC = getString("^^"); addChild($$, $1); }
  | Attributes "operator" "==" FuncDefinition ';'  { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $4); $$->value.valC = getString("=="); addChild($$, $1); }
  | Attributes "operator" "!=" FuncDefinition ';'  { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $4); $$->value.valC = getString("!="); addChild($$, $1); }
  | Attributes "operator" '>' FuncDefinition ';'   { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $4); $$->value.valC = getString(">"); addChild($$, $1); }
  | Attributes "operator" '<' FuncDefinition ';'   { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $4); $$->value.valC = getString("<"); addChild($$, $1); }
  | Attributes "operator" ">=" FuncDefinition ';'  { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $4); $$->value.valC = getString(">="); addChild($$, $1); }
  | Attributes "operator" "<=" FuncDefinition ';'  { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $4); $$->value.valC = getString("<="); addChild($$, $1); }
  | Attributes "operator" "<=>" FuncDefinition ';' { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $4); $$->value.valC = getString("<=>"); addChild($$, $1); }
  | "operator" '+' FuncDefinition ';'              { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $3); $$->value.valC = getString("+"); }
  | "operator" '-' FuncDefinition ';'              { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $3); $$->value.valC = getString("-"); }
  | "operator" '*' FuncDefinition ';'              { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $3); $$->value.valC = getString("*"); }
  | "operator" '/' FuncDefinition ';'              { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $3); $$->value.valC = getString("/"); }
  | "operator" '%' FuncDefinition ';'              { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $3); $$->value.valC = getString("%"); }
  | "operator" '&' FuncDefinition ';'              { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $3); $$->value.valC = getString("&"); }
  | "operator" '|' FuncDefinition ';'              { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $3); $$->value.valC = getString("|"); }
  | "operator" '^' FuncDefinition ';'              { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $3); $$->value.valC = getString("^"); }
  | "operator" ">>" FuncDefinition ';'             { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $3); $$->value.valC = getString(">>"); }
  | "operator" "<<" FuncDefinition ';'             { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $3); $$->value.valC = getString("<<"); }
  | "operator" ">>>" FuncDefinition ';'            { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $3); $$->value.valC = getString(">>>"); }
  | "operator" "&&" FuncDefinition ';'             { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $3); $$->value.valC = getString("&&"); }
  | "operator" "||" FuncDefinition ';'             { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $3); $$->value.valC = getString("||"); }
  | "operator" "^^" FuncDefinition ';'             { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $3); $$->value.valC = getString("^^"); }
  | "operator" "==" FuncDefinition ';'             { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $3); $$->value.valC = getString("=="); }
  | "operator" "!=" FuncDefinition ';'             { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $3); $$->value.valC = getString("!="); }
  | "operator" '>' FuncDefinition ';'              { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $3); $$->value.valC = getString(">"); }
  | "operator" '<' FuncDefinition ';'              { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $3); $$->value.valC = getString("<"); }
  | "operator" ">=" FuncDefinition ';'             { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $3); $$->value.valC = getString(">="); }
  | "operator" "<=" FuncDefinition ';'             { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $3); $$->value.valC = getString("<="); }
  | "operator" "<=>" FuncDefinition ';'            { $$ = std::make_unique<Node>(2, NodeType::OPOVERLOAD, @$); addChild($$, $3); $$->value.valC = getString("<=>"); }
  ;

Parameters:
    '(' ')'               { $$ = std::make_unique<Node>(0, NodeType::PARAMLIST, @$); }
  | '(' ParameterList ')' { $$ = std::move($2); }
  ;

Arguments:
    '(' ')'              { $$ = std::make_unique<Node>(0, NodeType::ARGLIST, @$); }
  | '(' ArgumentList ')' { $$ = std::move($2); }
  ;

ParameterList:
    Parameter                   { $$ = std::make_unique<Node>(1, NodeType::PARAMLIST, @$); addChild($$, $1); }
  | ParameterList ',' Parameter { $$ = std::move($1); addChild($$, $3); }
  ;

ArgumentList:
    Expression                  { $$ = std::make_unique<Node>(1, NodeType::ARGLIST, @$); addChild($$, $1); }
  | ArgumentList ',' Expression { $$ = std::move($1); addChild($$, $3); }
  ;

Parameter:
    ID ':' Type { $$ = std::make_unique<Node>(1, NodeType::PARAM, @$); $$->value.valC = $1; addChild($$, $3); }
  ;

Attributes:
    '@' '(' AttributeList ')' { $$ = std::move($3); }
  ;

AttributeList:
    ID               { $$ = std::make_unique<Node>(1, NodeType::ATTRS, @$); NodePtr n = std::make_unique<Node>(0, NodeType::ATTR, @$); n->value.valC = $1; addChild($$, n); }
  | AttributeList ID { $$ = std::move($1); NodePtr n = std::make_unique<Node>(0, NodeType::ATTR, @$); n->value.valC = $2; addChild($$, n); }
  ;

Type:
    SingleType   %prec "Type" { $$ = std::move($1); }
  | TupleType                 { $$ = std::move($1); }
  | FunctionType              { $$ = std::move($1); }
  ;

SingleType:
    FullyQualifiedPath TypeQualifiers { $$ = std::make_unique<Node>(2, NodeType::TYPESINGLE, @$); addChild($$, $1); addChild($$, $2); }
  ;

TypeQualifiers:
    %empty                         { $$ = std::make_unique<Node>(0, NodeType::NONE, @$); }
  | TypeQualifiers '*'             { $$ = std::make_unique<Node>(0, NodeType::TYPEQUALPTR, @$); addChild($$, $1); }
  | TypeQualifiers '?'             { $$ = std::make_unique<Node>(0, NodeType::TYPEQUALUPG, @$); addChild($$, $1); }
  | TypeQualifiers '[' INTEGER ']' { $$ = std::make_unique<Node>(0, NodeType::TYPEQUALARR, @$); $$->value.valI = $3; addChild($$, $1); }
  | TypeQualifiers '[' ']'         { $$ = std::make_unique<Node>(0, NodeType::TYPEQUALARR, @$); $$->value.valI = -1; addChild($$, $1); }
  ;

TupleType:
    '(' TupleTypes ')' { $$ = std::move($2); }
  ;

TupleTypes:
    Type                { $$ = std::make_unique<Node>(1, NodeType::TYPEMULTI, @$); addChild($$, $1); }
  | TupleTypes ',' Type { $$ = std::move($1); addChild($$, $3); }
  ;

FunctionType:
    TupleType "->" Type { $$ = std::make_unique<Node>(2, NodeType::TYPEFN, @$); addChild($$, $1); addChild($$, $3); }
  | TupleType "->"      { $$ = std::make_unique<Node>(1, NodeType::TYPEFN, @$); addChild($$, $1); }
  ;

BlockStatement:
    '{' '}'            { $$ = std::make_unique<Node>(0, NodeType::BLOCK, @$); }
  | '{' Statements '}' { $$ = std::move($2); }
  ;

Statements:
    Statement            { $$ = std::make_unique<Node>(1, NodeType::BLOCK, @$); addChild($$, $1); }
  | Statements Statement { $$ = std::move($1); addChild($$, $2); }
  ;

Statement:
    Expression ';'       { $$ = std::move($1); }
  | BasicDeclaration ';' { $$ = std::move($1); }
  | BlockStatement       { $$ = std::move($1); }
  | IfStatement          { $$ = std::move($1); }
  | ForStatement         { $$ = std::move($1); }
  | WhileStatement       { $$ = std::move($1); }
  | ReturnStatement      { $$ = std::move($1); }
  ;

IfStatement:
    "if" '(' Expression ')' BlockStatement                       %prec "if"   { $$ = std::make_unique<Node>(2, NodeType::STMTIF, @$); addChild($$, $3); addChild($$, $5); }
  | "if" '(' Expression ')' BlockStatement "else" IfStatement                 { $$ = std::make_unique<Node>(3, NodeType::STMTIF, @$); addChild($$, $3); addChild($$, $5); addChild($$, $7);}
  | "if" '(' Expression ')' BlockStatement "else" BlockStatement              { $$ = std::make_unique<Node>(3, NodeType::STMTIF, @$); addChild($$, $3); addChild($$, $5); addChild($$, $7);}
  | "if" '(' Expression ')' BlockStatement "else" "=>" Statement %prec "else" { $$ = std::make_unique<Node>(3, NodeType::STMTIF, @$); addChild($$, $3); addChild($$, $5); addChild($$, $8);}
  | "if" '(' Expression ')' IfStatement                          %prec "if"   { $$ = std::make_unique<Node>(2, NodeType::STMTIF, @$); addChild($$, $3); addChild($$, $5); }
  | "if" '(' Expression ')' IfStatement "else" IfStatement                    { $$ = std::make_unique<Node>(3, NodeType::STMTIF, @$); addChild($$, $3); addChild($$, $5); addChild($$, $7);}
  | "if" '(' Expression ')' IfStatement "else" BlockStatement                 { $$ = std::make_unique<Node>(3, NodeType::STMTIF, @$); addChild($$, $3); addChild($$, $5); addChild($$, $7);}
  | "if" '(' Expression ')' IfStatement "else" "=>" Statement    %prec "else" { $$ = std::make_unique<Node>(3, NodeType::STMTIF, @$); addChild($$, $3); addChild($$, $5); addChild($$, $8);}
  | "if" '(' Expression ')' "=>" Statement                       %prec "if"   { $$ = std::make_unique<Node>(2, NodeType::STMTIF, @$); addChild($$, $3); addChild($$, $6); }
  | "if" '(' Expression ')' "=>" Statement "else" IfStatement                 { $$ = std::make_unique<Node>(3, NodeType::STMTIF, @$); addChild($$, $3); addChild($$, $6); addChild($$, $8);}
  | "if" '(' Expression ')' "=>" Statement "else" BlockStatement              { $$ = std::make_unique<Node>(3, NodeType::STMTIF, @$); addChild($$, $3); addChild($$, $6); addChild($$, $8);}
  | "if" '(' Expression ')' "=>" Statement "else" "=>" Statement %prec "else" { $$ = std::make_unique<Node>(3, NodeType::STMTIF, @$); addChild($$, $3); addChild($$, $6); addChild($$, $9);}
  ;

ForStatement:
    DoForStatement                            { $$ = std::move($1); }
  | "for" '(' ForArguments ')' BlockStatement { $$ = std::make_unique<Node>(2, NodeType::STMTFOR, @$); addChild($$, $3); addChild($$, $5); }
  | "for" '(' ForArguments ')' ForStatement   { $$ = std::make_unique<Node>(2, NodeType::STMTFOR, @$); addChild($$, $3); addChild($$, $5); }
  | "for" '(' ForArguments ')' "=>" Statement { $$ = std::make_unique<Node>(2, NodeType::STMTFOR, @$); addChild($$, $3); addChild($$, $6); }
  ;

DoForStatement:
    "for" '(' BasicDeclaration ')' BlockStatement '(' DoForArguments ')' ';' { $$ = std::make_unique<Node>(3, NodeType::STMTDOFOR, @$); addChild($$, $7); addChild($$, $5); addChild($$, $3); }
  | "for" '(' ')' BlockStatement '(' DoForArguments ')' ';'                  { $$ = std::make_unique<Node>(2, NodeType::STMTDOFOR, @$); addChild($$, $6); addChild($$, $4); }
  ;

ForArguments:
    BasicDeclaration ';' BasicExpression ';' Expression { $$ = std::make_unique<Node>(3, NodeType::ARGSFOR, @$); addChild($$, $1); addChild($$, $3); addChild($$, $5); }
  | ';' BasicExpression ';' Expression                  { $$ = std::make_unique<Node>(3, NodeType::ARGSFOR, @$); addChild($$, std::make_unique<Node>(0, NodeType::NONE, @$)); addChild($$, $2); addChild($$, $4); }
  | BasicDeclaration ';' ';' Expression                 { $$ = std::make_unique<Node>(3, NodeType::ARGSFOR, @$); addChild($$, $1); addChild($$, std::make_unique<Node>(0, NodeType::NONE, @$)); addChild($$, $4); }
  | BasicDeclaration ';' BasicExpression ';'            { $$ = std::make_unique<Node>(3, NodeType::ARGSFOR, @$); addChild($$, $1); addChild($$, $3); addChild($$, std::make_unique<Node>(0, NodeType::NONE, @$)); }
  | ';' ';' Expression                                  { $$ = std::make_unique<Node>(3, NodeType::ARGSFOR, @$); addChild($$, std::make_unique<Node>(0, NodeType::NONE, @$)); addChild($$, std::make_unique<Node>(0, NodeType::NONE, @$)); addChild($$, $3); }
  | BasicDeclaration ';' ';'                            { $$ = std::make_unique<Node>(3, NodeType::ARGSFOR, @$); addChild($$, $1); addChild($$, std::make_unique<Node>(0, NodeType::NONE, @$)); addChild($$, std::make_unique<Node>(0, NodeType::NONE, @$)); }
  | ';' BasicExpression ';'                             { $$ = std::make_unique<Node>(3, NodeType::ARGSFOR, @$); addChild($$, std::make_unique<Node>(0, NodeType::NONE, @$)); addChild($$, $2); addChild($$, std::make_unique<Node>(0, NodeType::NONE, @$)); }
  | ';' ';'                                             { $$ = std::make_unique<Node>(3, NodeType::ARGSFOR, @$); addChild($$, std::make_unique<Node>(0, NodeType::NONE, @$)); addChild($$, std::make_unique<Node>(0, NodeType::NONE, @$)); addChild($$, std::make_unique<Node>(0, NodeType::NONE, @$)); }
  ;

DoForArguments:
    BasicExpression ';' Expression { $$ = std::make_unique<Node>(2, NodeType::ARGSFOR, @$); addChild($$, $1); addChild($$, $3); }
  | ';' Expression                 { $$ = std::make_unique<Node>(2, NodeType::ARGSFOR, @$); addChild($$, std::make_unique<Node>(0, NodeType::NONE, @$)); addChild($$, $2); }
  | BasicExpression ';'            { $$ = std::make_unique<Node>(2, NodeType::ARGSFOR, @$); addChild($$, $1); addChild($$, std::make_unique<Node>(0, NodeType::NONE, @$)); }
  | ';'                            { $$ = std::make_unique<Node>(2, NodeType::ARGSFOR, @$); addChild($$, std::make_unique<Node>(0, NodeType::NONE, @$)); addChild($$, std::make_unique<Node>(0, NodeType::NONE, @$)); }
  ;

WhileStatement:
    "while" '(' Expression ')' BlockStatement     { $$ = std::make_unique<Node>(2, NodeType::STMTWHILE, @$); addChild($$, $3); addChild($$, $5); }
  | "while" '(' Expression ')' WhileStatement     { $$ = std::make_unique<Node>(2, NodeType::STMTWHILE, @$); addChild($$, $3); addChild($$, $5); }
  | "while" '(' Expression ')' "=>" Statement     { $$ = std::make_unique<Node>(2, NodeType::STMTWHILE, @$); addChild($$, $3); addChild($$, $6); }
  | "while" BlockStatement '(' Expression ')' ';' { $$ = std::make_unique<Node>(2, NodeType::STMTDOWHILE, @$); addChild($$, $4); addChild($$, $2); }
  ;

ReturnStatement:
    "return" '(' Expression ')' ';' { $$ = std::make_unique<Node>(1, NodeType::STMTRTN, @$); addChild($$, $3); }
	;

Expression:
    BasicValue                               { $$ = std::move($1); }
  | '(' Expression ')'                       { $$ = std::move($2); }
  | Expression '[' Expression ']'            { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("[]"); addChild($$, $3); }
  | Expression Arguments                     { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("()"); addChild($$, $2); }
  | Expression "++"                          { $$ = std::make_unique<Node>(1, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("++"); $$->value.valB = true; }
  | Expression "--"                          { $$ = std::make_unique<Node>(1, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("--"); $$->value.valB = true; }
  | '+' Expression    %prec "PrefixOperator" { $$ = std::make_unique<Node>(1, NodeType::EXPRBASIC, @$); addChild($$, $2); $$->value.valC = getString("+"); $$->value.valB = false; }
  | '-' Expression    %prec "PrefixOperator" { $$ = std::make_unique<Node>(1, NodeType::EXPRBASIC, @$); addChild($$, $2); $$->value.valC = getString("-"); $$->value.valB = false; }
  | '*' Expression    %prec "PrefixOperator" { $$ = std::make_unique<Node>(1, NodeType::EXPRBASIC, @$); addChild($$, $2); $$->value.valC = getString("*"); $$->value.valB = false; }
  | '&' Expression    %prec "PrefixOperator" { $$ = std::make_unique<Node>(1, NodeType::EXPRBASIC, @$); addChild($$, $2); $$->value.valC = getString("&"); $$->value.valB = false; }
  | "++" Expression   %prec "PrefixOperator" { $$ = std::make_unique<Node>(1, NodeType::EXPRBASIC, @$); addChild($$, $2); $$->value.valC = getString("++"); $$->value.valB = false; }
  | "--" Expression   %prec "PrefixOperator" { $$ = std::make_unique<Node>(1, NodeType::EXPRBASIC, @$); addChild($$, $2); $$->value.valC = getString("--"); $$->value.valB = false; }
  | '!' Expression    %prec "PrefixOperator" { $$ = std::make_unique<Node>(1, NodeType::EXPRBASIC, @$); addChild($$, $2); $$->value.valC = getString("!"); $$->value.valB = false; }
  | "!!" Expression   %prec "PrefixOperator" { $$ = std::make_unique<Node>(1, NodeType::EXPRBASIC, @$); addChild($$, $2); $$->value.valC = getString("!!"); $$->value.valB = false; }
  | Expression '.' Expression                { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("."); addChild($$, $3); }
  | Expression '+' Expression                { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("+"); addChild($$, $3); }
  | Expression '-' Expression                { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("-"); addChild($$, $3); }
  | Expression '*' Expression                { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("*"); addChild($$, $3); }
  | Expression '/' Expression                { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("/"); addChild($$, $3); }
  | Expression '%' Expression                { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("%"); addChild($$, $3); }
  | Expression '&' Expression                { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("&"); addChild($$, $3); }
  | Expression '|' Expression                { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("|"); addChild($$, $3); }
  | Expression '^' Expression                { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("^"); addChild($$, $3); }
  | Expression ">>" Expression               { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString(">>"); addChild($$, $3); }
  | Expression "<<" Expression               { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("<<"); addChild($$, $3); }
  | Expression ">>>" Expression              { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString(">>>"); addChild($$, $3); }
  | Expression "&&" Expression               { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("&&"); addChild($$, $3); }
  | Expression "||" Expression               { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("||"); addChild($$, $3); }
  | Expression "^^" Expression               { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("^^"); addChild($$, $3); }
  | Expression "==" Expression               { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("=="); addChild($$, $3); }
  | Expression "!=" Expression               { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("!="); addChild($$, $3); }
  | Expression '>' Expression                { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString(">"); addChild($$, $3); }
  | Expression '<' Expression                { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("<"); addChild($$, $3); }
  | Expression ">=" Expression               { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString(">="); addChild($$, $3); }
  | Expression "<=" Expression               { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("<="); addChild($$, $3); }
  | Expression "<=>" Expression              { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("<=>"); addChild($$, $3); }

  | Expression '=' Expression                { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("="); addChild($$, $3); }
  | Expression CompAssignOperator Expression %prec "CompAssign"
                                             { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = $2; addChild($$, $3); }
  ;

BasicExpression:
    BasicValue                                    { $$ = std::move($1); }
  | BasicExpression '[' BasicExpression ']'       { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("[]"); addChild($$, $3); }
  | BasicExpression Arguments                     { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("()"); addChild($$, $2); }
  | BasicExpression "++"                          { $$ = std::make_unique<Node>(1, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("++"); $$->value.valB = true; }
  | BasicExpression "--"                          { $$ = std::make_unique<Node>(1, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("--"); $$->value.valB = true; }
  | '+' BasicExpression    %prec "PrefixOperator" { $$ = std::make_unique<Node>(1, NodeType::EXPRBASIC, @$); addChild($$, $2); $$->value.valC = getString("+"); $$->value.valB = false; }
  | '-' BasicExpression    %prec "PrefixOperator" { $$ = std::make_unique<Node>(1, NodeType::EXPRBASIC, @$); addChild($$, $2); $$->value.valC = getString("-"); $$->value.valB = false; }
  | '*' BasicExpression    %prec "PrefixOperator" { $$ = std::make_unique<Node>(1, NodeType::EXPRBASIC, @$); addChild($$, $2); $$->value.valC = getString("*"); $$->value.valB = false; }
  | '&' BasicExpression    %prec "PrefixOperator" { $$ = std::make_unique<Node>(1, NodeType::EXPRBASIC, @$); addChild($$, $2); $$->value.valC = getString("&"); $$->value.valB = false; }
  | "++" BasicExpression   %prec "PrefixOperator" { $$ = std::make_unique<Node>(1, NodeType::EXPRBASIC, @$); addChild($$, $2); $$->value.valC = getString("++"); $$->value.valB = false; }
  | "--" BasicExpression   %prec "PrefixOperator" { $$ = std::make_unique<Node>(1, NodeType::EXPRBASIC, @$); addChild($$, $2); $$->value.valC = getString("--"); $$->value.valB = false; }
  | '!' BasicExpression    %prec "PrefixOperator" { $$ = std::make_unique<Node>(1, NodeType::EXPRBASIC, @$); addChild($$, $2); $$->value.valC = getString("!"); $$->value.valB = false; }
  | "!!" BasicExpression   %prec "PrefixOperator" { $$ = std::make_unique<Node>(1, NodeType::EXPRBASIC, @$); addChild($$, $2); $$->value.valC = getString("!!"); $$->value.valB = false; }
  | BasicExpression '+' BasicExpression           { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("+"); addChild($$, $3); }
  | BasicExpression '-' BasicExpression           { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("-"); addChild($$, $3); }
  | BasicExpression '*' BasicExpression           { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("*"); addChild($$, $3); }
  | BasicExpression '/' BasicExpression           { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("/"); addChild($$, $3); }
  | BasicExpression '%' BasicExpression           { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("%"); addChild($$, $3); }
  | BasicExpression '&' BasicExpression           { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("&"); addChild($$, $3); }
  | BasicExpression '|' BasicExpression           { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("|"); addChild($$, $3); }
  | BasicExpression '^' BasicExpression           { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("^"); addChild($$, $3); }
  | BasicExpression ">>" BasicExpression          { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString(">>"); addChild($$, $3); }
  | BasicExpression "<<" BasicExpression          { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("<<"); addChild($$, $3); }
  | BasicExpression ">>>" BasicExpression         { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString(">>>"); addChild($$, $3); }
  | BasicExpression "&&" BasicExpression          { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("&&"); addChild($$, $3); }
  | BasicExpression "||" BasicExpression          { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("||"); addChild($$, $3); }
  | BasicExpression "^^" BasicExpression          { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("^^"); addChild($$, $3); }
  | BasicExpression "==" BasicExpression          { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("=="); addChild($$, $3); }
  | BasicExpression "!=" BasicExpression          { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("!="); addChild($$, $3); }
  | BasicExpression '>' BasicExpression           { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString(">"); addChild($$, $3); }
  | BasicExpression '<' BasicExpression           { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("<"); addChild($$, $3); }
  | BasicExpression ">=" BasicExpression          { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString(">="); addChild($$, $3); }
  | BasicExpression "<=" BasicExpression          { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("<="); addChild($$, $3); }
  | BasicExpression "<=>" BasicExpression         { $$ = std::make_unique<Node>(2, NodeType::EXPRBASIC, @$); addChild($$, $1); $$->value.valC = getString("<=>"); addChild($$, $3); }
  ;

BasicValue:
    FullyQualifiedPath       { $$ = std::move($1); }
  | FuncDefinition           { $$ = std::move($1); }
  | BasicValueString         { $$ = std::move($1); }
  | INTEGER                  { $$ = std::make_unique<Node>(0, NodeType::VALINT, @$); $$->value.valI = $1; }
  | FLOAT                    { $$ = std::make_unique<Node>(0, NodeType::VALFLOAT, @$); $$->value.valF = $1; }
  | CHAR                     { $$ = std::make_unique<Node>(0, NodeType::VALINT, @$); $$->value.valI = $1; }
  | BIT                      { $$ = std::make_unique<Node>(0, NodeType::VALBIT, @$); $$->value.valB = $1; }
  ;

BasicValueString:
    STRING { $$ = std::make_unique<Node>(0, NodeType::VALSTR, @$); $$->value.valC = $1; }
  ;

CompAssignOperator:
    "+="   { $$ = getString("+"); }
  | "-="   { $$ = getString("-"); }
  | "*="   { $$ = getString("*"); }
  | "/="   { $$ = getString("/"); }
  | "%="   { $$ = getString("%"); }
  | "&="   { $$ = getString("&"); }
  | "|="   { $$ = getString("|"); }
  | "^="   { $$ = getString("^"); }
  | "<<="  { $$ = getString("<<"); }
  | ">>="  { $$ = getString(">>"); }
  | ">>>=" { $$ = getString(">>>"); }
  ;

%%

void yy::parser::error(const location_type& l, const std::string& p) {
    PLOGE << *l.begin.filename << ':' << l.begin.line << '.' << l.begin.column << ": " << p;
}