%{
#include <stdlib.h>
#include "clok.hpp"
#include "bridge.hpp"
#include "grammar.hpp"
#include "location.hh"

int backslashSequence(char);

int column;
%}

typedef yy::parser::token token

%option noyywrap
%option yylineno
%%
%{
    yy::location& lok = bridge.location;
    lok.step();
%}

run/[^A-Za-z0-9_]  { return yy::parser::make_RUNK(lok); }
load/[^A-Za-z0-9_] { return yy::parser::make_LOADK(lok); }

[A-Za-z_][A-Za-z0-9_]* { return yy::parser::make_ID(getString(yytext), lok); }

[+-]?[0-9]+\.[0-9]+([eE][+-]?[0-9]+)?f?                        { return yy::parser::make_FLOAT(strtod(yytext, NULL), lok); } // Decimal floating point with decimal point
[+-]?0[xX][0-9A-Fa-f]+\.[0-9A-Fa-f]+([pP][+-]?[0-9A-Fa-f]+)?f? { return yy::parser::make_FLOAT(strtod(yytext, NULL), lok); } // Hex floating point with decimal point
[+-]?[0-9]+[eE][+-]?[:digit]+f?                                { return yy::parser::make_FLOAT(strtod(yytext, NULL), lok); } // Decimal floating point with exponent
[+-]?0[xX][0-9A-Fa-f]+[pP][+-]?[0-9A-Fa-f]+f?                  { return yy::parser::make_FLOAT(strtod(yytext, NULL), lok); } // Hex floating point with exponent
[+-]?[0-9]+f                                                   { return yy::parser::make_FLOAT(strtod(yytext, NULL), lok); } // Decimal floating point integer
[+-]?0[xX][0-9]+f                                              { return yy::parser::make_FLOAT(strtod(yytext, NULL), lok); } // Hex floating point integer

[+-]?[0-9]+            { return yy::parser::make_INTEGER(strtol(yytext, NULL, 10), lok); } // Decimal integer literal
[+-]?0[xX][0-9A-Fa-f]+ { return yy::parser::make_INTEGER(strtol(yytext, NULL, 16), lok); } // Hex integer literal

\'\\x[0-9A-Fa-f]{2}\' { return yy::parser::make_CHAR(strtol(yytext + (3 * sizeof(char)), 0, 16), lok); }
\'\\u[0-9A-Fa-f]{4}\' { return yy::parser::make_CHAR(strtol(yytext + (3 * sizeof(char)), 0, 16), lok); }
\'\\U[0-9A-Fa-f]{8}\' { return yy::parser::make_CHAR(strtol(yytext + (3 * sizeof(char)), 0, 16), lok); }
\'\\.\'               { return yy::parser::make_CHAR(backslashSequence(yytext[2]), lok); }
\'.\'                 { return yy::parser::make_CHAR((long) yytext[1], lok); }

\"[^\"\n]*\" { return yy::parser::make_STRING(getString(yytext), lok); }

"::" { return yy::parser::make_DBLCOLON(lok); }
"->" { return yy::parser::make_RSARROW(lok); }
"||" { return yy::parser::make_DBLBAR(lok); }
"&&" { return yy::parser::make_DBLAND(lok); }
"^^" { return yy::parser::make_DBLXOR(lok); }
"<<" { return yy::parser::make_DBLLEFT(lok); }
">>" { return yy::parser::make_DBLRIGHT(lok); }
"++" { return yy::parser::make_DBLPLUS(lok); }
"--" { return yy::parser::make_DBLMINUS(lok); }
"!!" { return yy::parser::make_DBLNOT(lok); }
"==" { return yy::parser::make_DBLEQ(lok); }
"!=" { return yy::parser::make_NOTEQ(lok); }
">=" { return yy::parser::make_GTEQ(lok); }
"<=" { return yy::parser::make_LTEQ(lok); }
"=>" { return yy::parser::make_RDARROW(lok); }

"+=" { return yy::parser::make_COMPADD(lok); }
"-=" { return yy::parser::make_COMPSUB(lok); }
"*=" { return yy::parser::make_COMPMUL(lok); }
"/=" { return yy::parser::make_COMPDIV(lok); }
"%=" { return yy::parser::make_COMPMOD(lok); }
"&=" { return yy::parser::make_COMPAND(lok); }
"|=" { return yy::parser::make_COMPIOR(lok); }
"^=" { return yy::parser::make_COMPXOR(lok); }
"<<=" { return yy::parser::make_COMPASL(lok); }
">>=" { return yy::parser::make_COMPASR(lok); }
">>>=" { return yy::parser::make_COMPUSR(lok); }

">>>" { return yy::parser::make_TPLRIGHT(lok); }
">=>" { return yy::parser::make_RRDARROW(lok); }

<<EOF>>    { return yy::parser::make_END(lok); }
[ \t]+     // Whitespace need not be
\n+        { lok.lines(yyleng); lok.step(); }
.          { return yy::parser::symbol_type(yytext[0], lok); }

%%

int backslashSequence(char c) {
    switch (c) {
        case 'a':
            return '\a';
        case 'b':
            return '\b';
        case 'e':
            return '\e';
        case 'f':
            return '\f';
        case 'n':
            return '\n';
        case 'r':
            return '\r';
        case 't':
            return '\t';
        case 'v':
            return '\v';
        case '\\':
            return '\\';
        case '\'':
            return '\'';
    }
    return '\0';
}
